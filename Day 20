#include <iostream>
#include <stack>
using namespace std;

// Function to insert an element into the sorted stack
void insertInSortedOrder(stack<int> &st, int element) {
    // Base case: stack is empty or element >= top
    if (st.empty() || element >= st.top()) {
        st.push(element);
        return;
    }

    // Remove the top and recurse
    int topElement = st.top();
    st.pop();
    insertInSortedOrder(st, element);

    // Push the top back
    st.push(topElement);
}

// Function to sort the stack recursively
void sortStack(stack<int> &st) {
    // Base case
    if (st.empty()) return;

    // Remove top element
    int topElement = st.top();
    st.pop();

    // Recursively sort the remaining stack
    sortStack(st);

    // Insert the popped element in sorted order
    insertInSortedOrder(st, topElement);
}

// Utility function to print stack (from top to bottom)
void printStack(stack<int> st) {
    while (!st.empty()) {
        cout << st.top() << " ";
        st.pop();
    }
    cout << endl;
}

int main() {
    stack<int> st;
    st.push(3);
    st.push(-1);
    st.push(5);
    st.push(2);
    st.push(0);

    cout << "Original Stack (top to bottom): ";
    printStack(st);

    // Sort the stack
    sortStack(st);

    cout << "Sorted Stack (top to bottom): ";
    printStack(st);

    return 0;
}
